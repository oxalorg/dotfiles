# @oxalorg
# Common shell rc

zmodload zsh/zprof

if [ "$(uname -s)" = "Darwin" ]; then
  export ZSH="/Users/ox/.oh-my-zsh"
  export DOTFILES=~/Dropbox/projects/dotfiles
  export myos=mac
elif grep -iq microsoft /proc/version; then
  export ZSH="/home/ox/.oh-my-zsh"
  export DOTFILES=/c/Users/ox/Dropbox/projects/dotfiles
  export myos=wsl
else
  export ZSH="/home/ox/.oh-my-zsh"
  export DOTFILES=~/Dropbox/projects/dotfiles
  export myos=linux
fi

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

ZSH_THEME="robbyrussell"
HYPHEN_INSENSITIVE="true"
DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"
# DISABLE_AUTO_TITLE="true"
# ENABLE_CORRECTION="true"
# DISABLE_UNTRACKED_FILES_DIRTY="true"
HIST_STAMPS="yyyy-mm-dd"

# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git fzf fzf-tab zsh-autosuggestions)


# User configuration

# export MANPATH="/usr/local/man:$MANPATH"
# export LANG=en_US.UTF-8

# export ARCHFLAGS="-arch x86_64"

EDITOR=emacsclient

if [ "$TMUX" = "" ]; then tmux; fi

set -o vi # enter the matrix
bindkey -M viins 'qp' vi-cmd-mode
bindkey "^?" backward-delete-char
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down
bindkey -M vicmd '/' fzf-history-widget
fzf-history-widget-accept() {
    fzf-history-widget
    zle accept-line
}
#zle -N fzf-history-widget-accept
bindkey -M vicmd '?' fzf-history-widget-accept
bindkey -M vicmd 'gf' fzf-cd-widget
TERM=xterm-256color

function zle-keymap-select {
	if [[ ${KEYMAP} == vicmd ]] ||
		[[ $1 = 'block' ]]; then
			echo -ne '\e[1 q'

		elif [[ ${KEYMAP} == main ]] ||
			[[ ${KEYMAP} == viins ]] ||
			[[ ${KEYMAP} = '' ]] ||
			[[ $1 = 'beam' ]]; then
					echo -ne '\e[5 q'
	fi
}
zle -N zle-keymap-select

zle-line-init() {
zle -K viins
    echo -ne "\e[5 q"
}

autoload -z edit-command-line   # Allows C-x-e to edit command in editor
zle -N edit-command-line
bindkey "^X^E" edit-command-line

# Imports
[ -f $DOTFILES/shell/aliases ] && source $DOTFILES/shell/aliases  # Import common aliases
[ -f ~/.ox/ox ] && source ~/.ox/ox
[ -f ~/.dircolors ] && eval `dircolors ~/.dircolors`
[ -f ~/.z.sh ] || curl https://raw.githubusercontent.com/rupa/z/master/z.sh -o ~/.z.sh
[ -f ~/.z.sh ] && source ~/.z.sh

export PATH=/usr/local/go/bin:$PATH
export PATH=$HOME/go/bin:$PATH
export PATH="$HOME/.local/bin:$PATH"
export PATH="/opt/bin:$PATH"
export PATH="$HOME/Library/Python/3.6/bin:$PATH"
export PATH="$HOME/Library/Python/3.7/bin:$PATH"
export PATH="$HOME/.npm-global/bin:$PATH"
export PATH=$HOME/.yarn/bin:/usr/local/bin:$PATH
export PATH=$HOME/.emacs.d/bin:$PATH
export PATH="$HOME/.rbenv/bin:$PATH"
export PATH="/opt/gradle/bin:$PATH"
[ -f ~/.rbenv/bin/rbenv ] && eval "$(rbenv init -)"

if [[ "$myos" == "wsl" ]]; then
    #export DISPLAY="`grep nameserver /etc/resolv.conf | sed 's/nameserver //'`:0"
    export DISPLAY=$(netstat -rn | grep -o "^0.0.0.0 \+\([0-9]\.\?\)\+" | grep -o "[^ ]\+$"):0
    export LIBGL_ALWAYS_INDIRECT=1
fi

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
[ -f "$HOME/.local/bin/ox" ] && source $HOME/.local/bin/ox

# Functions
 
# press ctrl-z again to unsuspend
fancy-ctrl-z () {
    if [[ $#BUFFER -eq 0 ]]; then
        BUFFER="fg"
            zle accept-line
    else
        zle push-input
            zle clear-screen
            fi
}
zle -N fancy-ctrl-z
bindkey '^Z' fancy-ctrl-z

if [[ "$myos" == "mac" ]]; then
    alias xdg-open="open"
else
    alias open="xdg-open"
fi

export PATH=$PATH:$ANDROID_HOME/emulator
export PATH=$PATH:$ANDROID_HOME/tools
export PATH=$PATH:$ANDROID_HOME/tools/bin
export PATH=$PATH:$ANDROID_HOME/platform-tools

export FZF_BASE=$HOME/.fzf
export FZF_DEFAULT_COMMAND='fd --type f'
export FZF_DEFAULT_OPTS="--layout=reverse --inline-info --bind=tab:down,shift-tab:up"
export FZF_CTRL_T_COMMAND='fd --type f'

export REVIEW_BASE='master'

# export PYENV_ROOT="$HOME/.pyenv"
# export PATH="$PYENV_ROOT/bin:$PATH"
# if command -v pyenv 1>/dev/null 2>&1; then
#     eval "$(pyenv init -)"
#     eval "$(pyenv virtualenv-init -)"
# fi

workon_cache=()
function w() {
    if [ ${#workon_cache[@]} -eq 0 ]; then
        # populate cache
        workon_cache=(`workon`)
    fi
    curr_pwd=`pwd`
    curr_dir=`basename $curr_pwd`
	if [[ " ${workon_cache[@]} " =~ " ${curr_dir} " ]]; then
        # workon_cache contains env matching curr_dir
        workon $curr_dir
    else
        echo "Sorry. No virtualenv found."
        echo "Do you want to create a virtualenv named: '$curr_dir'? [y/N]"
        read choice
        if [[ $choice == [yY]* ]]; then
            mkvirtualenv $curr_dir
            workon_cach+=($curr_dir)
        fi
	fi
}

function og() {
    project_slug=$(git remote -v | tr ':' ' ' | awk '{print $3}' | sed 's/\(.*\).git/\1/' | head -n 1)
    if [[ $# -gt 0 && "$1" == "i"* ]]; then
        echo "Opening $project_slug/issues/"
        xdg-open https://github.com/$project_slug/issues/
    else
        echo "Opening $project_slug"
        xdg-open https://github.com/$project_slug/
    fi
}

function ogi() {
    project_slug=$(git remote -v | tr ':' ' ' | awk '{print $3}' | sed 's/\(.*\).git/\1/' | head -n 1)
    echo "Opening $project_slug"
    xdg-open https://github.com/$project_slug
}

function optimizejpg() {
    ogdir="optimizejpg-original"
    mkdir -p $ogdir
    for file in "$@"; do
        cp "$file" $ogdir
        convert "$file" -resize 1920x1080\> -sampling-factor 4:2:0 -strip -quality 85 -interlace JPEG -colorspace RGB "$file"
    done
}
function optimizepng() {
    ogdir="optimizepng-original"
    mkdir -p $ogdir
    for file in "$@"; do
        cp "$file" $ogdir
        pngquant "$file" --ext "opti.png"
        rm "$file"
    done
}

function dropbox-ignore() {
    if [[ "$(uname)" == "Darwin" ]]; then
        xattr -w com.dropbox.ignored 1 "$1"
    else
        attr -s com.dropbox.ignored -V 1 "$1"
    fi
}

f() {
    sels=( "${(@f)$(fd "${fd_default[@]}" "${@:2}"| fzf)}" )
    test -n "$sels" && print -z -- "$1 ${sels[@]:q:q}"
}

# Like f, but not recursive.
fm() {
    f "$@" --max-depth 1
}

fif() {
    if [ ! "$#" -gt 0 ]; then echo "Need a string to search for!"; return 1; fi
    rg --files-with-matches --no-messages "$1" | fzf --preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$1' || rg --ignore-case --pretty --context 10 '$1' {}"
}

meminsight() {
    if [ ! "$#" -gt 0 ]; then echo "Need a single argument with process id"; return 1; fi
    sudo pmap -x $1 | tail -n +3 | head -n -2 | sort -g -k 2 | awk '{$2=$2*1024;print}' | numfmt --field=2 --to iec
}

TIMEFMT='%J   %U  user %S system %P cpu %*E total'$'\n'\
'avg shared (code):         %X KB'$'\n'\
'avg unshared (data/stack): %D KB'$'\n'\
'total (sum):               %K KB'$'\n'\
'max memory:                %M MB'$'\n'\
'page faults from disk:     %F'$'\n'\
'other page faults:         %R'

topdf() {
    echo "\\\usepackage{sectsty}\n\\\sectionfont{\\\clearpage}" >! /tmp/chapter_break.tex
        # -f gfm \
        # --include-in-header /tmp/chapter_break.tex \
        # -V linkcolor:blue \
        # -V geometry:a4paper \
    pandoc "$1" \
        --toc \
        -V geometry:"top=2.5cm, bottom=2cm, left=4cm, right=4cm" \
        -V mainfont="DejaVu Serif" \
        -V monofont="DejaVu Sans Mono" \
        --latex-engine=xelatex \
        -o "$2"
}

mkvtomp4() {
    ffmpeg -i "$1" -codec copy "${1%.*}.mp4"
}

videotoaudio() {
    ffmpeg -i "$1" -vn -acodec copy "${1%.*}.aac"
}

ee() {
    vimcmd=""
    firstfile=""
    first=1
    for f in `git ls-files --modified`; do
        if [[ first -eq 1 ]]; then
            firstfile="$f"
            first=0
        else
            vimcmd=$vimcmd"| badd $f "
        fi

    done;
    $EDITOR "$firstfile" "-c" "$vimcmd"
}

compresspdf() {
gs  -q -dNOPAUSE -dBATCH -dSAFER \
    -sDEVICE=pdfwrite \
    -dCompatibilityLevel=1.3 \
    -dPDFSETTINGS=/screen \
    -dEmbedAllFonts=true \
    -dSubsetFonts=true \
    -dColorImageDownsampleType=/Bicubic \
    -dColorImageResolution=72 \
    -dGrayImageDownsampleType=/Bicubic \
    -dGrayImageResolution=72 \
    -dMonoImageDownsampleType=/Bicubic \
    -dMonoImageResolution=72 \
    -sOutputFile="$2" \
    "$1"
}

compressimg() {
    convert -strip -interlace Plane -gaussian-blur 0.05 -quality 85% -resize 25% -auto-orient "$1" "compressed_$1"
}

imgwrite() {
  TEXT="$2"
  convert -font helvetica -fill green -pointsize 36 -draw "text 15,50 '$TEXT'" "$1" "text-$1"
}

curlpj() {
    curl -X POST -H "Content-Type: application/json" -d "$2" "$1"
}

curlgj() {
    curl -X GET -H "Content-Type: application/json" -d "$2" "$1"
}

curlj() {
    curl -H "Content-Type: application/json" "$@"
}

x(){
    if [ -f $1 ] ; then
        case $1 in
        *.tar.bz2)   tar xvjf $1    ;;
        *.tar.gz)    tar xvzf $1    ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar x $1     ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar xvf $1     ;;
        *.tbz2)      tar xvjf $1    ;;
        *.tgz)       tar xvzf $1    ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *)           echo "Unable to extract '$1'" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

oxtmp() {
    scp $1 ark:/srv/ox/oxal.org/tmp/
    echo "https://oxal.org/tmp/$1"
}

ocr() {
    tesseract "$1" "${1%.*}.ocr"
}

ssh-key-create() {
    ssh-keygen -t ed25519 -C "mitesh@miteshshah.com" -N "" -f "$(date +%s)"
}

export PATH="/home/ox/.pyenv/bin:$PATH"
if command -v pyenv &> /dev/null; then
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
    eval "$(direnv hook zsh)"
fi

# xsetwacom set "Wacom Bamboo One S Pen eraser" MapToOutput HEAD-0
# xsetwacom set "Wacom Bamboo One S Pen stylus" MapToOutput HEAD-0

export PATH="/opt/homebrew/opt/openjdk/bin:$PATH"
export CPPFLAGS="-I/opt/homebrew/opt/openjdk/include"

autoload -Uz compinit; compinit

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh  # Import FZF plugin

source $ZSH/oh-my-zsh.sh

#;; Local Variables:
#;; mode: sh
#;; End:

