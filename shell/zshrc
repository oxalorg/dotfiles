# @oxalorg
# Common shell rc

zmodload zsh/zprof

if [ "$(uname -s)" = "Darwin" ]; then
  export ZSH="/Users/ox/.oh-my-zsh"
  export DOTFILES=~/Dropbox/projects/dotfiles
  export myos=mac
elif grep -iq microsoft /proc/version; then
  export ZSH="/home/ox/.oh-my-zsh"
  export DOTFILES=/c/Users/ox/Dropbox/projects/dotfiles
  export myos=wsl
else
  export ZSH="/home/ox/.oh-my-zsh"
  export DOTFILES=~/Dropbox/projects/dotfiles
  export myos=linux
fi

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

export PATH=/opt/homebrew/bin:$PATH
export PATH=/usr/local/go/bin:$PATH
export PATH=$HOME/.cargo/bin:$PATH
export PATH=$PATH:/Users/ox/bin
export PATH=$HOME/go/bin:$PATH
export PATH="$HOME/.local/bin:$PATH"
export PATH="/opt/bin:$PATH"
export PATH="$HOME/Library/Python/3.6/bin:$PATH"
export PATH="$HOME/Library/Python/3.7/bin:$PATH"
export PATH="$HOME/.npm-global/bin:$PATH"
export PATH=$HOME/.yarn/bin:/usr/local/bin:$PATH
export PATH=$HOME/.emacs.d/bin:$PATH
export PATH="$HOME/.rbenv/bin:$PATH"
export PATH="/opt/gradle/bin:$PATH"
[ -f ~/.rbenv/bin/rbenv ] && eval "$(rbenv init -)"
export PATH="$PATH:$HOME/.babashka/bbin/bin"


ZSH_THEME="simple" # set by `omz`
HYPHEN_INSENSITIVE="true"
DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"
# DISABLE_AUTO_TITLE="true"
# ENABLE_CORRECTION="true"
# DISABLE_UNTRACKED_FILES_DIRTY="true"
HIST_STAMPS="yyyy-mm-dd"

# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
    git fzf fzf-tab docker docker-compose
)

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"
# export LANG=en_US.UTF-8

# export ARCHFLAGS="-arch x86_64"

EDITOR=emacsclient

# if tmux has a session, attach to the first session, if not just launch tmux
if [ "$TMUX" = "" ]; then
    if [ "$(tmux list-sessions 2>/dev/null | wc -l)" -gt 0 ]; then
        tmux attach-session -t 0
    else
        tmux
    fi
fi

set -o vi # enter the matrix
bindkey -M viins 'qp' vi-cmd-mode
bindkey "^?" backward-delete-char
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down
bindkey -M vicmd '/' fzf-history-widget
fzf-history-widget-accept() {
    fzf-history-widget
    zle accept-line
}
#zle -N fzf-history-widget-accept
bindkey -M vicmd '?' fzf-history-widget-accept
bindkey -M vicmd 'gf' fzf-cd-widget
TERM=xterm-256color

function zle-keymap-select {
	if [[ ${KEYMAP} == vicmd ]] ||
		[[ $1 = 'block' ]]; then
			echo -ne '\e[1 q'

		elif [[ ${KEYMAP} == main ]] ||
			[[ ${KEYMAP} == viins ]] ||
			[[ ${KEYMAP} = '' ]] ||
			[[ $1 = 'beam' ]]; then
					echo -ne '\e[5 q'
	fi
}
zle -N zle-keymap-select

zle-line-init() {
zle -K viins
    echo -ne "\e[5 q"
}

autoload -z edit-command-line   # Allows C-x-e to edit command in editor
zle -N edit-command-line
bindkey "^X^E" edit-command-line

# Imports
[ -f $DOTFILES/shell/aliases ] && source $DOTFILES/shell/aliases  # Import common aliases
[ -f ~/.ox/ox ] && source ~/.ox/ox
[ -f ~/.dircolors ] && eval `dircolors ~/.dircolors`
[ -f ~/.z.sh ] || curl https://raw.githubusercontent.com/rupa/z/master/z.sh -o ~/.z.sh
[ -f ~/.z.sh ] && source ~/.z.sh

export GPG_TTY=$(tty)

gcloud-source() {
    source "/opt/homebrew/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc"
}

if [[ "$myos" == "wsl" ]]; then
    #export DISPLAY="`grep nameserver /etc/resolv.conf | sed 's/nameserver //'`:0"
    export DISPLAY=$(netstat -rn | grep -o "^0.0.0.0 \+\([0-9]\.\?\)\+" | grep -o "[^ ]\+$"):0
    export LIBGL_ALWAYS_INDIRECT=1
elif [[ "$myos" == "mac" ]]; then
    export PATH="/Users/ox/Library/Python/3.9/bin:$PATH"
fi

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export DISABLE_AUTO_TITLE='true'

export NVM_DIR="$HOME/.nvm"
if [[ "$myos" == "mac" ]]; then
    export PATH="/opt/homebrew/opt/node@16/bin:$PATH"
    export LDFLAGS="-L/opt/homebrew/opt/node@16/lib"
    export CPPFLAGS="-I/opt/homebrew/opt/node@16/include"
    [ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && . "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
    [ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && . "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_complet
else
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
fi
[ -f "$HOME/.local/bin/ox" ] && source $HOME/.local/bin/ox

if command -v zsh-autosuggestions &> /dev/null; then
    source $(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh
fi

if command -v mise &> /dev/null; then
    eval "$(mise activate zsh --shims)"
fi

# Functions

# press ctrl-z again to unsuspend
fancy-ctrl-z () {
    if [[ $#BUFFER -eq 0 ]]; then
        BUFFER="fg"
            zle accept-line
    else
        zle push-input
            zle clear-screen
            fi
}
zle -N fancy-ctrl-z
bindkey '^Z' fancy-ctrl-z

if [[ "$myos" == "mac" ]]; then
    alias xdg-open="open"
else
    alias open="xdg-open"
fi

export PATH=$PATH:$ANDROID_HOME/emulator
export PATH=$PATH:$ANDROID_HOME/tools
export PATH=$PATH:$ANDROID_HOME/tools/bin
export PATH=$PATH:$ANDROID_HOME/platform-tools

export FZF_BASE=$HOME/.fzf
export FZF_DEFAULT_COMMAND='fd --type f'
export FZF_DEFAULT_OPTS="--layout=reverse --inline-info --bind=tab:down,shift-tab:up"
export FZF_CTRL_T_COMMAND='fd'

export REVIEW_BASE='master'

# export PYENV_ROOT="$HOME/.pyenv"
# export PATH="$PYENV_ROOT/bin:$PATH"
# if command -v pyenv 1>/dev/null 2>&1; then
#     eval "$(pyenv init -)"
#     eval "$(pyenv virtualenv-init -)"
# fi

workon_cache=()
function w() {
    if [ ${#workon_cache[@]} -eq 0 ]; then
        # populate cache
        workon_cache=(`workon`)
    fi
    curr_pwd=`pwd`
    curr_dir=`basename $curr_pwd`
	if [[ " ${workon_cache[@]} " =~ " ${curr_dir} " ]]; then
        # workon_cache contains env matching curr_dir
        workon $curr_dir
    else
        echo "Sorry. No virtualenv found."
        echo "Do you want to create a virtualenv named: '$curr_dir'? [y/N]"
        read choice
        if [[ $choice == [yY]* ]]; then
            mkvirtualenv $curr_dir
            workon_cach+=($curr_dir)
        fi
	fi
}

function ligit() {
 DIR=~/projects/"$1"
 git clone git@github.com:lambdaisland/"$1".git "$DIR" || cd "$DIR" && git pull
 cd "$DIR"
}

function og() {
    project_slug=$(git remote -v | tr ':' ' ' | awk '{print $3}' | sed 's/\(.*\).git/\1/' | head -n 1)
    if [[ $# -gt 0 && "$1" == "i"* ]]; then
        echo "Opening $project_slug/issues/"
        xdg-open https://github.com/$project_slug/issues/
    else
        echo "Opening $project_slug"
        xdg-open https://github.com/$project_slug/
    fi
}

function ogi() {
    project_slug=$(git remote -v | tr ':' ' ' | awk '{print $3}' | sed 's/\(.*\).git/\1/' | head -n 1)
    echo "Opening $project_slug"
    xdg-open https://github.com/$project_slug
}

function optimizejpg() {
    ogdir="optimizejpg-original"
    mkdir -p $ogdir
    for file in "$@"; do
        cp "$file" $ogdir
        convert "$file" -resize 1920x1080\> -sampling-factor 4:2:0 -strip -quality 85 -interlace JPEG -colorspace RGB "$file"
    done
}
function optimizepng() {
    ogdir="optimizepng-original"
    mkdir -p $ogdir
    for file in "$@"; do
        cp "$file" $ogdir
        pngquant "$file" --ext "opti.png"
        rm "$file"
    done
}

function dropbox-ignore() {
    if [[ "$(uname)" == "Darwin" ]]; then
        xattr -w com.dropbox.ignored 1 "$1"
    else
        attr -s com.dropbox.ignored -V 1 "$1"
    fi
}

f() {
    sels=( "${(@f)$(fd "${fd_default[@]}" "${@:2}"| fzf)}" )
    test -n "$sels" && print -z -- "$1 ${sels[@]:q:q}"
}

# Like f, but not recursive.
fm() {
    f "$@" --max-depth 1
}

fif() {
    if [ ! "$#" -gt 0 ]; then echo "Need a string to search for!"; return 1; fi
    rg --files-with-matches --no-messages "$1" | fzf --preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$1' || rg --ignore-case --pretty --context 10 '$1' {}"
}

meminsight() {
    if [ ! "$#" -gt 0 ]; then echo "Need a single argument with process id"; return 1; fi
    sudo pmap -x $1 | tail -n +3 | head -n -2 | sort -g -k 2 | awk '{$2=$2*1024;print}' | numfmt --field=2 --to iec
}

TIMEFMT='%J   %U  user %S system %P cpu %*E total'$'\n'\
'avg shared (code):         %X KB'$'\n'\
'avg unshared (data/stack): %D KB'$'\n'\
'total (sum):               %K KB'$'\n'\
'max memory:                %M MB'$'\n'\
'page faults from disk:     %F'$'\n'\
'other page faults:         %R'

topdf() {
    echo "\\\usepackage{sectsty}\n\\\sectionfont{\\\clearpage}" >! /tmp/chapter_break.tex
        # -f gfm \
        # --include-in-header /tmp/chapter_break.tex \
        # -V linkcolor:blue \
        # -V geometry:a4paper \
    pandoc "$1" \
        --toc \
        -V geometry:"top=2.5cm, bottom=2cm, left=4cm, right=4cm" \
        -V mainfont="DejaVu Serif" \
        -V monofont="DejaVu Sans Mono" \
        --latex-engine=xelatex \
        -o "$2"
}

mkvtomp4() {
    ffmpeg -i "$1" -codec copy "${1%.*}.mp4"
}

videotoaudio() {
    ffmpeg -i "$1" -vn -acodec copy "${1%.*}.aac"
}

videocompress() {
    ffmpeg -i "$1" -vcodec libx264 -crf 28 "${1%.*}.mp4"
}

ee() {
    vimcmd=""
    firstfile=""
    first=1
    for f in `git ls-files --modified`; do
        if [[ first -eq 1 ]]; then
            firstfile="$f"
            first=0
        else
            vimcmd=$vimcmd"| badd $f "
        fi

    done;
    $EDITOR "$firstfile" "-c" "$vimcmd"
}

compresspdf() {
gs  -q -dNOPAUSE -dBATCH -dSAFER \
    -sDEVICE=pdfwrite \
    -dCompatibilityLevel=1.3 \
    -dPDFSETTINGS=/screen \
    -dEmbedAllFonts=true \
    -dSubsetFonts=true \
    -dColorImageDownsampleType=/Bicubic \
    -dColorImageResolution=72 \
    -dGrayImageDownsampleType=/Bicubic \
    -dGrayImageResolution=72 \
    -dMonoImageDownsampleType=/Bicubic \
    -dMonoImageResolution=72 \
    -sOutputFile="$2" \
    "$1"
}

compressimg() {
    convert -strip -interlace Plane -gaussian-blur 0.05 -quality 85% -resize 50% -auto-orient "$1" "compressed_$1"
}

compressimginplace() {
    convert -strip -interlace Plane -gaussian-blur 0.05 -quality 85% -resize 25% -auto-orient "$1" "$1"
}

compressimginplace-resize() {
    convert -strip -interlace Plane -gaussian-blur 0.05 -quality 85% -resize "$2" -auto-orient "$1" "$1"
}

resizeimg() {
    convert -strip -interlace Plane -gaussian-blur 0.05 -quality 85% -resize "$2" -auto-orient "$1" "compressed_$1"
}

imgwrite() {
  TEXT="$2"
  convert -font helvetica -fill green -pointsize 36 -draw "text 15,50 '$TEXT'" "$1" "text-$1"
}

curlpj() {
    curl -X POST -H "Content-Type: application/json" -d "$2" "$1"
}

curlgj() {
    curl -X GET -H "Content-Type: application/json" -d "$2" "$1"
}

curlj() {
    curl -H "Content-Type: application/json" "$@"
}

x(){
    if [ -f $1 ] ; then
        case $1 in
        *.tar.bz2)   tar xvjf $1    ;;
        *.tar.gz)    tar xvzf $1    ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar x $1     ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar xvf $1     ;;
        *.tbz2)      tar xvjf $1    ;;
        *.tgz)       tar xvzf $1    ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *)           echo "Unable to extract '$1'" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

oxtmp() {
    scp $1 ark2:/srv/ox/oxal.org/tmp/
    echo "https://oxal.org/tmp/$1"
}

ocr() {
    tesseract "$1" "${1%.*}.ocr"
}

ssh-key-create() {
    ssh-keygen -t ed25519 -C "mitesh@miteshshah.com" -N "" -f "$(date +%s)"
}

export PATH="/home/ox/.pyenv/bin:$PATH"
if command -v pyenv &> /dev/null; then
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
fi
eval "$(direnv hook zsh)"

# xsetwacom set "Wacom Bamboo One S Pen eraser" MapToOutput HEAD-0
# xsetwacom set "Wacom Bamboo One S Pen stylus" MapToOutput HEAD-0

export PATH="/opt/homebrew/opt/openjdk/bin:$PATH"
export CPPFLAGS="-I/opt/homebrew/opt/openjdk/include"

autoload -Uz compinit; compinit

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh  # Import FZF plugin

source $ZSH/oh-my-zsh.sh

export HISTSIZE=1000000000
export SAVEHIST=$HISTSIZE
setopt EXTENDED_HISTORY
setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
setopt HIST_BEEP                 # Beep when accessing nonexistent history.

eval "$(mcfly init zsh)"

alias funnelclj="clojure -Sdeps '{:deps {lambdaisland/funnel {:mvn/version \"1.4.71\"}}}' -m lambdaisland.funnel -vv"
function tsc-error-files() {
    tsc | awk -F '(' '/error TS/ {print $1}' | sort | uniq
}

check_git_repos() {
  local project_dir="$HOME/projects"
  local total=0
  local clean_count=0
  local unclean_count=0
  local unclean_repos=()

  for dir in "$project_dir"/*/; do
    if [ -d "$dir/.git" ]; then
      ((total++))
      # Run git status and check for cleanliness
      if git -C "$dir" status --porcelain | grep -q .; then
        ((unclean_count++))
        unclean_repos+=("$dir")
      else
        ((clean_count++))
      fi
    fi
  done

  echo "Total Git repositories checked: $total"
  echo "Total clean repositories: $clean_count"
  echo "Total unclean repositories: $unclean_count"

  if [ "$unclean_count" -gt 0 ]; then
    echo -e "\nUnclean repositories:"
    printf "%s\n" "${unclean_repos[@]}"
  fi
}

# File to track the last run date
LAST_RUN_FILE="$HOME/.git_check_last_run"

# Function to call `check_git_repos` only once per day
daily_git_check() {
  # Get the current date in YYYY-MM-DD format
  local today=$(date +%F)

  # Check if the last run file exists and read the last run date
  if [ -f "$LAST_RUN_FILE" ]; then
    last_run_date=$(cat "$LAST_RUN_FILE")
  else
    last_run_date=""
  fi

  # If the last run date is not today, run the check and update the last run file
  if [ "$last_run_date" != "$today" ]; then
    echo "Running daily Git repository check..."
    check_git_repos
    echo "$today" > "$LAST_RUN_FILE"
  else
    echo "Daily Git repository check has already been run today."
  fi
}

daily_git_check


function gcp-switch() {
  local project="$1"
  case "$project" in
    gaiwan)
      gcloud config configurations activate gaiwan
      ;;
    default)
      gcloud config configurations activate default
      ;;
    itrev)
      gcloud config configurations activate itrev
      ;;
    humble)
      gcloud config configurations activate humble
      ;;
    *)
      echo "Invalid project specified. Choose from: gaiwan, default, itrev"
      return 1
      ;;
  esac
}

# Enable auto-completion for project names
function _gcp-switch-completion() {
  _arguments '*: :(_values "gaiwan" "default" "itrev" "humble")'
}
compdef _gcp-switch-completion gcp-switch

# zsh completion for doctl                                -*- shell-script -*-

__doctl_debug()
{
    local file="$BASH_COMP_DEBUG_FILE"
    if [[ -n ${file} ]]; then
        echo "$*" >> "${file}"
    fi
}

_doctl()
{
    local shellCompDirectiveError=1
    local shellCompDirectiveNoSpace=2
    local shellCompDirectiveNoFileComp=4
    local shellCompDirectiveFilterFileExt=8
    local shellCompDirectiveFilterDirs=16

    local lastParam lastChar flagPrefix requestComp out directive comp lastComp noSpace
    local -a completions

    __doctl_debug "\n========= starting completion logic =========="
    __doctl_debug "CURRENT: ${CURRENT}, words[*]: ${words[*]}"

    # The user could have moved the cursor backwards on the command-line.
    # We need to trigger completion from the $CURRENT location, so we need
    # to truncate the command-line ($words) up to the $CURRENT location.
    # (We cannot use $CURSOR as its value does not work when a command is an alias.)
    words=("${=words[1,CURRENT]}")
    __doctl_debug "Truncated words[*]: ${words[*]},"

    lastParam=${words[-1]}
    lastChar=${lastParam[-1]}
    __doctl_debug "lastParam: ${lastParam}, lastChar: ${lastChar}"

    # For zsh, when completing a flag with an = (e.g., doctl -n=<TAB>)
    # completions must be prefixed with the flag
    setopt local_options BASH_REMATCH
    if [[ "${lastParam}" =~ '-.*=' ]]; then
        # We are dealing with a flag with an =
        flagPrefix="-P ${BASH_REMATCH}"
    fi

    # Prepare the command to obtain completions
    requestComp="${words[1]} __complete ${words[2,-1]}"
    if [ "${lastChar}" = "" ]; then
        # If the last parameter is complete (there is a space following it)
        # We add an extra empty parameter so we can indicate this to the go completion code.
        __doctl_debug "Adding extra empty parameter"
        requestComp="${requestComp} \"\""
    fi

    __doctl_debug "About to call: eval ${requestComp}"

    # Use eval to handle any environment variables and such
    out=$(eval ${requestComp} 2>/dev/null)
    __doctl_debug "completion output: ${out}"

    # Extract the directive integer following a : from the last line
    local lastLine
    while IFS='\n' read -r line; do
        lastLine=${line}
    done < <(printf "%s\n" "${out[@]}")
    __doctl_debug "last line: ${lastLine}"

    if [ "${lastLine[1]}" = : ]; then
        directive=${lastLine[2,-1]}
        # Remove the directive including the : and the newline
        local suffix
        (( suffix=${#lastLine}+2))
        out=${out[1,-$suffix]}
    else
        # There is no directive specified.  Leave $out as is.
        __doctl_debug "No directive found.  Setting do default"
        directive=0
    fi

    __doctl_debug "directive: ${directive}"
    __doctl_debug "completions: ${out}"
    __doctl_debug "flagPrefix: ${flagPrefix}"

    if [ $((directive & shellCompDirectiveError)) -ne 0 ]; then
        __doctl_debug "Completion received error. Ignoring completions."
        return
    fi

    while IFS='\n' read -r comp; do
        if [ -n "$comp" ]; then
            # If requested, completions are returned with a description.
            # The description is preceded by a TAB character.
            # For zsh's _describe, we need to use a : instead of a TAB.
            # We first need to escape any : as part of the completion itself.
            comp=${comp//:/\\:}

            local tab=$(printf '\t')
            comp=${comp//$tab/:}

            __doctl_debug "Adding completion: ${comp}"
            completions+=${comp}
            lastComp=$comp
        fi
    done < <(printf "%s\n" "${out[@]}")

    if [ $((directive & shellCompDirectiveNoSpace)) -ne 0 ]; then
        __doctl_debug "Activating nospace."
        noSpace="-S ''"
    fi

    if [ $((directive & shellCompDirectiveFilterFileExt)) -ne 0 ]; then
        # File extension filtering
        local filteringCmd
        filteringCmd='_files'
        for filter in ${completions[@]}; do
            if [ ${filter[1]} != '*' ]; then
                # zsh requires a glob pattern to do file filtering
                filter="\*.$filter"
            fi
            filteringCmd+=" -g $filter"
        done
        filteringCmd+=" ${flagPrefix}"

        __doctl_debug "File filtering command: $filteringCmd"
        _arguments '*:filename:'"$filteringCmd"
    elif [ $((directive & shellCompDirectiveFilterDirs)) -ne 0 ]; then
        # File completion for directories only
        local subdir
        subdir="${completions[1]}"
        if [ -n "$subdir" ]; then
            __doctl_debug "Listing directories in $subdir"
            pushd "${subdir}" >/dev/null 2>&1
        else
            __doctl_debug "Listing directories in ."
        fi

        local result
        _arguments '*:dirname:_files -/'" ${flagPrefix}"
        result=$?
        if [ -n "$subdir" ]; then
            popd >/dev/null 2>&1
        fi
        return $result
    else
        __doctl_debug "Calling _describe"
        if eval _describe "completions" completions $flagPrefix $noSpace; then
            __doctl_debug "_describe found some completions"

            # Return the success of having called _describe
            return 0
        else
            __doctl_debug "_describe did not find completions."
            __doctl_debug "Checking if we should do file completion."
            if [ $((directive & shellCompDirectiveNoFileComp)) -ne 0 ]; then
                __doctl_debug "deactivating file completion"

                # We must return an error code here to let zsh know that there were no
                # completions found by _describe; this is what will trigger other
                # matching algorithms to attempt to find completions.
                # For example zsh can match letters in the middle of words.
                return 1
            else
                # Perform file completion
                __doctl_debug "Activating file completion"

                # We must return the result of this command, so it must be the
                # last command, or else we must store its result to return it.
                _arguments '*:filename:_files'" ${flagPrefix}"
            fi
        fi
    fi
}

# don't run the completion function when being source-ed or eval-ed
if [ "$funcstack[1]" = "_doctl" ]; then
    _doctl
fi

compdef _doctl doctl

# pnpm
export PNPM_HOME="/Users/ox/Library/pnpm"
case ":$PATH:" in
  # *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end


# >>> mamba initialize >>>
# !! Contents within this block are managed by 'mamba init' !!
export MAMBA_EXE='/opt/homebrew/opt/micromamba/bin/micromamba';
export MAMBA_ROOT_PREFIX='/Users/ox/micromamba';
__mamba_setup="$("$MAMBA_EXE" shell hook --shell zsh --root-prefix "$MAMBA_ROOT_PREFIX" 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__mamba_setup"
else
    alias micromamba="$MAMBA_EXE"  # Fallback on help from mamba activate
fi
unset __mamba_setup
# <<< mamba initialize <<<

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"

#;; Local Variables:
#;; mode: sh
#;; End:

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/ox/.local/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/ox/.local/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/ox/.local/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/ox/.local/google-cloud-sdk/completion.zsh.inc'; fi

[ -f "/Users/ox/.ghcup/env" ] && . "/Users/ox/.ghcup/env" # ghcup-env
# bun completions
[ -s "/Users/ox/.bun/_bun" ] && source "/Users/ox/.bun/_bun"

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"
